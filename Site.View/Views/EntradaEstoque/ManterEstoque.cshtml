@using System.Web.Mvc.Html
@using Microsoft.Ajax.Utilities
@using Site.DTO
@using Site.Entidade
@using Site.Enums
@using Site.Repositorio
@model Site.DTO.DTOEntradaEstoque

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)

    @Html.HiddenFor(m => m.Id)
    @Html.HiddenFor(m => m.TecidoAviamento)
    @Html.HiddenFor(m => m.EntradaSaida)

    <div style="width: 940px;padding-right: 15px; padding-left: 15px; margin-right: auto; margin-left: 10px; ">

        @{
            var mensagem = TempData["Mensagem"] as DTOMensagem;

            if (mensagem != null )
            {
                if (mensagem.TipoMensagem == TipoMensagem.Sucesso)
                {
        <div class="alert alert-success">
            <h4>
                @mensagem.Mensagem
            </h4>
        </div>
                }
                else if (mensagem.TipoMensagem == TipoMensagem.Alerta)
                {
        <div class="alert">
            <h4>
                @mensagem.Mensagem
            </h4>
        </div>
                }
            }

            var matP = string.Empty;
            var tec = string.Empty;
            var cor = string.Empty;
            var codigo = string.Empty;
            var qtde = string.Empty;
            var valor = string.Empty;
            var nota = string.Empty;
            var obs = string.Empty;
            var facc = string.Empty;
            var data = string.Empty;

            var labelType = string.Empty;
            var labelButton = string.Empty;
    
            if (Model.EntradaSaida == EntradaOuSaida.Entrada && Model.TecidoAviamento == TecidoOuAviamento.Tecido)
            {
                matP = "hidden";
                facc = "hidden";
                <legend>Estoque Tecido Segura</legend>
            }
            else if (Model.EntradaSaida == EntradaOuSaida.Entrada && Model.TecidoAviamento == TecidoOuAviamento.Aviamento)
            {
                tec = "hidden";
                cor = "hidden";
                codigo = "hidden";
                facc = "hidden";
                <legend>Estoque Aviamentos Segura</legend>
            }
            else if (Model.EntradaSaida == EntradaOuSaida.Saida && Model.TecidoAviamento == TecidoOuAviamento.Tecido)
            {
                matP = "hidden";
                valor = "hidden";
                nota = "hidden";
                <legend>Estoque Tecido Facção</legend>
            }
            else if (Model.EntradaSaida == EntradaOuSaida.Saida && Model.TecidoAviamento == TecidoOuAviamento.Aviamento)
            {
                tec = "hidden";
                cor = "hidden";
                codigo = "hidden";
                valor = "hidden";
                nota = "hidden";
                <legend>Estoque Aviamento Facção</legend>
            }

            if (Model.Id > 0)
            {
                labelType = "warning";
                labelButton = "Editar";
            }
            else
            {
                labelType = "info";
                labelButton = "Incluir";
            }
        }

        <table>
            <tbody>
                <tr>
                    <td class="@data">
                        <span class="label label-@labelType">Data</span>
                    </td>                    
                    <td class="@matP">
                        <span class="label label-@labelType">Aviamento</span>
                    </td>
                    <td class="@tec">
                        <span class="label label-@labelType">Tecido</span>
                    </td>
                    <td class="@cor">
                        <span class="label label-@labelType">Cor</span>
                    </td>
                    <td class="@codigo">
                        <span class="label label-@labelType">Código</span>
                    </td>
                    <td class="@qtde">
                        <span class="label label-@labelType">Quantidade</span>
                    </td>
                    <td class="@valor">
                        <span class="label label-@labelType">Valor</span>
                    </td>
                    <td class="@nota">
                        <span class="label label-@labelType">Nº Nota</span>
                    </td>
                    <td class="@obs">
                        <span class="label label-@labelType">Obs</span>
                    </td>
                    <td class="@facc">
                        <span class="label label-@labelType">Facção</span>
                    </td>
                    <td></td>
                </tr>
                <tr>
                    <td class="@data">
                        <div class="editor-field">
                            <input class="input-medium" id="Data" name="Data" type="date" value="@Model.Data.ToString("yyyy-MM-dd")">
                        </div>
                    </td>                    
                    <td class="@matP">
                        <div class="controls">
                            @{
                                var matPrima = new List<SelectListItem> { new SelectListItem { Text = string.Empty, Value = string.Empty } };
                                //matPrima.AddRange(new SelectList(Model.MateriasPrimarDropDown.DistinctBy(x => x.Id).OrderBy(y => y.Descricao), "Id", "Descricao"));
                                @*@Html.DropDownListFor(m => m.MateriaPrima.Id, new SelectList(matPrima, "Value", "Text"), new { @class = "input-medium", @style = "text-transform: uppercase" })*@
                            }
                        </div>
                    </td>
                    <td class="@tec">
                        <div class="controls">
                            @{
                                var tecidos = new List<SelectListItem> { new SelectListItem { Text = string.Empty, Value = string.Empty } };
                                tecidos.AddRange(new SelectList(Model.TecidosDropDown.DistinctBy(x => x.IdTecido).OrderBy(y => y.TipoTecido), "IdTecido", "TipoTecido"));
                                @Html.DropDownListFor(m => m.Tecido.IdTecido, new SelectList(tecidos, "Value", "Text"), new { @class = "input-medium", @style = "text-transform: uppercase" })
                            }
                        </div>
                    </td>
                    <td class="@cor">
                        <div class="controls">
                            @{
                                var cores = new List<SelectListItem> { new SelectListItem { Text = string.Empty, Value = string.Empty } };
                                cores.AddRange(new SelectList(Model.TecidosDropDown.DistinctBy(x => x.IdCor).OrderBy(y => y.Cor), "IdCor", "Cor"));
                                @Html.DropDownListFor(m => m.Tecido.IdCor, new SelectList(cores, "Value", "Text"), new { @class = "input-medium", @style = "text-transform: uppercase" })
                            }
                        </div>
                    </td>
                    <td class="@codigo">
                        <div class="controls">
                            @{
                                var codigos = new List<SelectListItem> { new SelectListItem { Text = string.Empty, Value = string.Empty } };
                                codigos.AddRange(new SelectList(Model.TecidosDropDown.DistinctBy(x => x.IdCodigo).OrderBy(y => y.Codigo), "IdCodigo", "Codigo"));
                                @Html.DropDownListFor(m => m.Tecido.IdCodigo, new SelectList(codigos, "Value", "Text"), new { @class = "input-medium", @style = "text-transform: uppercase" })
                            }
                        </div>
                    </td>
                    <td class="@qtde">
                        <div class="editor-field">
                            <input class="input-mini" id="Quantidade" name="Quantidade" type="number" value="@Model.Quantidade">
                        </div>
                    </td>
                    <td class="@valor">
                        <div class="editor-field">
                            <input class="input-mini" id="Valor" name="Valor" type="text" value="@Model.Valor">
                        </div>
                    </td>
                    <td class="@nota">
                        <div class="editor-field">
                            <input class="input-small" id="NumeroNota" name="NumeroNota" type="text" value="@Model.NumeroNota">
                        </div>
                    </td>
                    <td class="@obs">
                        <div class="editor-field">
                            <input class="input-medium" id="Obs" name="Obs" type="text" value="@Model.Obs">
                        </div>
                    </td>
                    <td class="@facc">
                        <div class="controls">
                            @{
                                var faccoes = new List<SelectListItem> { new SelectListItem { Text = string.Empty, Value = string.Empty } };
                                faccoes.AddRange(new SelectList(Model.FaccoesDropDown.DistinctBy(x => x.Id).OrderBy(y => y.Descricao), "Id", "Descricao"));
                                @Html.DropDownListFor(m => m.Faccao.Id, new SelectList(faccoes, "Value", "Text"), new { @class = "input-medium", @style = "text-transform: uppercase" })
                            }
                        </div>
                    </td>
                    <td>
                        <p>
                            <input class="btn btn-@labelType" id="btn-atualizar" type="submit" value="@labelButton" />
                        </p>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>

    <div style="width: 1130px;padding-right: 15px; padding-left: 15px; margin-right: auto; margin-left: 10px; ">

        @Html.Action("Estoque",
            new
            {
                entradaSaida = Model.EntradaSaida.ToString().Substring(0, 1),
                tecidoAviamento = Model.TecidoAviamento.ToString().Substring(0, 1)
            })

    </div>
}